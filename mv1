import tkinter as tk
from tkinter import messagebox, colorchooser, ttk
import os
import re

# 获取用户的桌面路径
desktop_path = os.path.join(os.path.expanduser("~"), 'Desktop')



# 用于存储项目路径
project_path = ""

# 验证函数
def validate_no_chinese(P):
    if re.match("^[A-Za-z0-9 ._-]*$", P) or P == "":
        return True
    else:
        return False

def validate_coupler_gap(value):
    if value == "" or (value.replace('.', '', 1).isdigit() and float(value) >= 0):
        return True
    else:
        return False

def validate_coupler_sounds(value):
    if value in ["0", "1", ""]:
        return True
    else:
        return False

def validate_version(P):
    if re.match("^[0-9.]*$", P) or P == "":
        return True
    else:
        return False

def validate_letters(P):
    if re.match("^[A-Za-z]*$", P) or P == "":
        return True
    else:
        return False

def validate_digits(P):
    if re.match("^[0-9]*$", P) or P == "":
        return True
    else:
        return False

def validate_plugin_name(P):
    if re.match("^[A-Za-z0-9 ]*$", P) or P == "":
        return True
    else:
        return False

def validate_era(P):
    if re.match("^[0-9s]*$", P) or P == "":
        return True
    else:
        return False

def validate_engine_spec(P):
    return True  # 允许任何字符输入

def validate_username_cn(P):
    return True  # 允许任何字符输入

def validate_mass(P):
    if re.match("^[0-9]*$", P) or P == "":
        return True
    else:
        return False

def validate_author(P):
    if re.match("^[A-Za-z0-9]*$", P) or P == "":
        return True
    else:
        return False

def validate_email(P):
    if re.match("^[A-Za-z0-9@._-]*$", P) or P == "":
        return True
    else:
        return False

def validate_license(P):
    if re.match("^[A-Za-z0-9 ._-]*$", P) or P == "":
        return True
    else:
        return False

def validate_organisation(P):
    if re.match("^[A-Za-z0-9 ]*$", P) or P == "":
        return True
    else:
        return False

def validate_contact_website(P):
    if re.match(r"^[A-Za-z0-9@._-:/]*$", P) or P == "":
        return True
    else:
        return False

def validate_company(P):
    if re.match("^[A-Za-z0-9 _-]*$", P) or P == "":
        return True
    else:
        return False

def validate_cabin_muffle(P):
    if re.match("^[A-Za-z0-9 ._-]*$", P) or P == "":
        return True
    else:
        return False

# 选择颜色的函数
def choose_light_color(entry):
    color_code = colorchooser.askcolor(title="选择颜色")
    if color_code[0]:
        def hex_to_rgb(hex_color):
            hex_color = hex_color.lstrip('#')
            return tuple(int(hex_color[i:i+2], 16) for i in (0, 2, 4))

        rgb_color = hex_to_rgb(color_code[1])
        formatted_color = ','.join(map(str, rgb_color))

        entry.delete(0, tk.END)
        entry.insert(0, formatted_color)

# 创建项目的函数
def create_project():
    global project_path
    project_name = project_name_entry.get().strip()
    if not project_name:
        messagebox.showwarning("提示", "请输入项目名称！")
        return
    
    folder_name = f"import_{project_name}"
    full_path = os.path.join(desktop_path, folder_name)
    
    try:
        os.makedirs(full_path, exist_ok=True)
        project_path = full_path
        
        subfolders = [f"{project_name}_art", f"{project_name}_body", f"{project_name}_light"]
        for subfolder in subfolders:
            os.makedirs(os.path.join(full_path, subfolder), exist_ok=True)
        
        messagebox.showinfo("成功", "创建成功")
        
        project_name_label.config(text=project_name)
        project_name_label.pack(padx=5, pady=5, side=tk.LEFT)
        project_name_entry.pack_forget()
        create_project_button.pack_forget()
        
        create_config_button.config(state=tk.NORMAL)
        
        root.minsize(800, 600)
        
        show_other_entries()
    except Exception as e:
        messagebox.showerror("错误", f"创建项目时出错: {e}")

# 创建配置文件的函数
def create_config():
    global project_path
    
    if not project_path:
        messagebox.showwarning("提示", "请先创建项目！")
        return
    
    version = version_entry.get().strip() or "4.5"
    category = f'"{category_entry.get().strip() or "AL"}"'
    region = f'"{region_entry.get().strip() or "CN"}"'
    kuid_part1 = kuid_part1_var.get().strip()
    kuid_part2 = kuid_part2_var.get().strip()
    kind = f'"{kind_entry.get().strip() or "traincar"}"'
    engine = engine_entry.get().strip() or "1"
    plugin_name = plugin_name_entry.get().strip()
    era = f'"{era_entry.get().strip() or "2020s"}"'
    engine_spec = engine_spec_entry.get().strip()
    mass = mass_entry.get().strip() or "138000"
    author = f'"{author_entry.get().strip()}"'
    email = f'"{email_entry.get().strip()}"'
    license = f'"{license_entry.get().strip()}"'
    organisation = f'"{organisation_entry.get().strip()}"'
    contact_website = f'"{contact_website_entry.get().strip() or "https://"}"'
    company = f'"{company_entry.get().strip()}"'
    cabin_muffle = cabin_muffle_entry.get().strip() or "0.6"
    light_color = light_color_entry.get().strip() or "221,211,180"
    ditch_color = ditch_color_entry.get().strip() or "221,211,180"
    flash_scale = flash_scale_entry.get().strip() or "1"
    enginesound = f'"{enginesound_entry.get().strip()}"'
    hornsound = f'"{hornsound_entry.get().strip()}"'
    interior = f'"{interior_entry.get().strip()}"'
    username_cn = f'"{username_cn_entry.get().strip()}"'

    if not (kuid_part1 and kuid_part2):
        messagebox.showwarning("提示", "请输入完整的 KUID！")
        return
    
    if not plugin_name:
        messagebox.showwarning("提示", "请输入插件名称！")
        return

    locomotive_type = locomotive_combobox.get()
    content = f"trainz-build{' ' * 40}{version}\n"
    content += f"category-class{' ' * 40}{category}\n"
    content += f"category-region{' ' * 40}{region}\n"
    content += f"kind{' ' * 40}{kind}\n"
    content += f"engine{' ' * 40}{engine}\n"
    content += f"kuid{' ' * 40}<kuid:{kuid_part1}:{kuid_part2}>\n"
    content += f"username{' ' * 40}\"{plugin_name}\"\n"
    content += f"category-era{' ' * 40}{era}\n"
    content += f"enginespec{' ' * 40}{engine_spec}\n"
    content += f"mass{' ' * 40}{mass}\n"
    content += f"author{' ' * 40}{author}\n"
    content += f"contact-email{' ' * 40}{email}\n"
    content += f"license{' ' * 40}{license}\n"
    content += f"organisation{' ' * 40}{organisation}\n"
    content += f"contact-website{' ' * 40}{contact_website}\n"
    content += f"company{' ' * 40}{company}\n"
    content += f"cabin_muffle{' ' * 40}{cabin_muffle}\n"
    content += f"max-coupler-gap{' ' * 40}{coupler_gap_entry.get().strip()}\n"
    content += f"use-coupler-sounds{' ' * 40}{coupler_sounds_entry.get().strip()}\n"
    content += f"light_color{' ' * 40}{light_color}\n"
    content += f"ditch_color{' ' * 40}{ditch_color}\n"
    content += f"flash_scale{' ' * 40}{flash_scale}\n"
    content += f"enginesound{' ' * 40}{enginesound_entry.get().strip()}\n"
    content += f"hornsound{' ' * 40}{hornsound_entry.get().strip()}\n"
    content += f"interior{' ' * 40}{interior_entry.get().strip()}\n"
    content += f"username-cn{' ' * 40}{username_cn}\n"
    content += f"description{' ' * 40}\"{description_entry.get().strip()}\"\n"
    content += f"description-cn{' ' * 40}\"{description_cn_entry.get().strip()}\"\n"

    if locomotive_type == "内燃机车":
        smoke_slowlife = smoke_slowlife_entry.get().strip() or "0.5"
        smoke_fastlife = smoke_fastlife_entry.get().strip() or "0.2"
        smoke_height = smoke_height_entry.get().strip() or "10"
        smoke_fastspeed = smoke_fastspeed_entry.get().strip() or "5"
        smoke_random = smoke_random_entry.get().strip() or "0.3"
        smoke_shade = smoke_shade_entry.get().strip() or "0.8"

        content += f"smoke_slowlife{' ' * 40}{smoke_slowlife}\n"
        content += f"smoke_fastlife{' ' * 40}{smoke_fastlife}\n"
        content += f"smoke_height{' ' * 40}{smoke_height}\n"
        content += f"smoke_fastspeed{' ' * 40}{smoke_fastspeed}\n"
        content += f"smoke_random{' ' * 40}{smoke_random}\n"
        content += f"smoke_shade{' ' * 40}{smoke_shade}\n"
    elif locomotive_type == "电力机车":
        pantograph = pantograph_entry.get().strip() or "1"
        content += f"pantograph{' ' * 40}{pantograph}\n"

    filename = "config.txt"
    filepath = os.path.join(project_path, filename)
    
    try:
        with open(filepath, "w", encoding='utf-8') as output_file:
            output_file.write(content)
        messagebox.showinfo("成功", "配置文件已保存")
    except Exception as e:
        messagebox.showerror("错误", f"保存文件时出错: {e}")

# 更新创建项目按钮状态的函数
def update_create_project_button_state(*args):
    project_name = project_name_entry.get().strip()
    create_project_button.config(state=tk.NORMAL if project_name else tk.DISABLED)

# 显示其他输入框
def show_other_entries():
    
    for frame in [version_frame, category_frame, region_frame, era_frame, kind_frame, engine_frame, kuid_frame,
                  plugin_name_frame, username_cn_frame, engine_spec_frame,
                  enginesound_frame, hornsound_frame, interior_frame, mass_frame, author_frame, email_frame, license_frame,
                  description_frame, description_cn_frame,
                  organisation_frame, contact_website_frame, company_frame, cabin_muffle_frame,
                  coupler_gap_frame, coupler_sounds_frame, light_color_frame,
                  ditch_color_frame, flash_scale_frame, locomotive_frame, smoke_frame,
                  description_frame, description_cn_frame]:  # 添加新输入框的 Frame
        frame.pack(padx=5, pady=5, fill=tk.X)
    create_config_button.pack(padx=5, pady=5, side=tk.BOTTOM)

    global about_button
    if 'about_button' not in globals():
        about_button = tk.Button(inner_frame, text="关于", command=show_about, bg=entry_bg_color, highlightbackground=background_color)
    about_button.pack(side=tk.BOTTOM, padx=5, pady=5)  # 显示关于按钮

# 隐藏其他输入框
def hide_other_entries():
    for frame in [version_frame, category_frame, region_frame, era_frame, kind_frame, engine_frame, kuid_frame,
                  plugin_name_frame, engine_spec_frame, mass_frame, author_frame, email_frame, license_frame,
                  description_frame, description_cn_frame,
                  organisation_frame, contact_website_frame, company_frame, cabin_muffle_frame,
                  coupler_gap_frame, coupler_sounds_frame, light_color_frame,
                  ditch_color_frame, flash_scale_frame, locomotive_frame, smoke_frame, pantograph_frame,
                  enginesound_frame, hornsound_frame, interior_frame, username_cn_frame]:  # 添加新输入框的 Frame
        frame.pack_forget()
    create_config_button.pack_forget()

    if 'about_button' in globals() and about_button.winfo_exists():
        about_button.pack_forget()  # 隐藏关于按钮
    

# 动态显示/隐藏与机车类型相关的输入框
def toggle_locomotive_options(event):
    selected = locomotive_combobox.get()
    if selected == "内燃机车":
        # 隐藏受电弓输入框
        pantograph_frame.pack_forget()
        # 显示烟雾相关输入框
        smoke_frame.pack(padx=5, pady=5, fill=tk.X)
    elif selected == "电力机车":
        # 显示受电弓输入框
        pantograph_frame.pack(padx=5, pady=5, fill=tk.X)
        # 隐藏烟雾相关输入框
        smoke_frame.pack_forget()

# 创建主窗口
root = tk.Tk()
root.title("Content Builder 内容创建器 v0.13")
root.geometry("400x100")  # 设置窗口大小为 800x300
root.resizable(False, False)  # 禁止用户调整窗口大小

# 设置统一的背景颜色
background_color = "#e1e1e1"

# 设置统一的输入框颜色
entry_bg_color = "#ffffff"

# 创建一个带滚动条的Canvas
main_canvas = tk.Canvas(root, borderwidth=0, background=background_color)
main_canvas.pack(side="left", fill="both", expand=True)

scrollbar = tk.Scrollbar(root, orient="vertical", command=main_canvas.yview)
scrollbar.pack(side="right", fill="y")

main_canvas.configure(yscrollcommand=scrollbar.set)
main_canvas.bind('<Configure>', lambda e: main_canvas.configure(scrollregion=main_canvas.bbox("all")))

# 创建一个内部Frame
inner_frame = tk.Frame(main_canvas, background=background_color)
main_canvas.create_window((0, 0), window=inner_frame, anchor="nw")


# 验证命令
validate_no_chinese_cmd = (root.register(validate_no_chinese), '%P')
validate_version_cmd = (root.register(validate_version), '%P')
validate_letters_cmd = (root.register(validate_letters), '%P')
validate_digits_cmd = (root.register(validate_digits), '%P')
validate_plugin_name_cmd = (root.register(validate_plugin_name), '%P')
validate_era_cmd = (root.register(validate_era), '%P')
validate_engine_spec_cmd = (root.register(validate_engine_spec), '%P')
validate_mass_cmd = (root.register(validate_mass), '%P')
validate_author_cmd = (root.register(validate_author), '%P')
validate_email_cmd = (root.register(validate_email), '%P')
validate_license_cmd = (root.register(validate_license), '%P')
validate_organisation_cmd = (root.register(validate_organisation), '%P')
validate_contact_website_cmd = (root.register(validate_contact_website), '%P')
validate_company_cmd = (root.register(validate_company), '%P')
validate_cabin_muffle_cmd = (root.register(validate_cabin_muffle), '%P')
validate_coupler_gap_cmd = (root.register(validate_coupler_gap), '%P')
validate_coupler_sounds_cmd = (root.register(validate_coupler_sounds), '%P')
validate_coupler_sounds_cmd = (root.register(validate_username_cn), '%P')

# 项目板块
project_frame = tk.Frame(inner_frame, background=background_color)
project_frame.pack(padx=5, pady=5, fill=tk.X)

create_project_button = tk.Button(project_frame, text="创建项目", command=create_project, state=tk.DISABLED, bg=entry_bg_color, highlightbackground=background_color)
create_project_button.pack(padx=5, pady=5, side=tk.RIGHT)

tk.Label(project_frame, text="项目名称:", background=background_color).pack(padx=5, pady=5, side=tk.LEFT)
project_name_entry = tk.Entry(project_frame, width=30, validate="key", validatecommand=validate_no_chinese_cmd, bg=entry_bg_color, highlightbackground=background_color)
project_name_entry.pack(padx=5, pady=5, side=tk.LEFT)
project_name_entry.bind("<KeyRelease>", update_create_project_button_state)

project_name_label = tk.Label(project_frame, text="", background=background_color)
project_name_label.pack_forget()

# 版本号输入框
version_frame = tk.Frame(inner_frame, background=background_color)
tk.Label(version_frame, text="版本号:", background=background_color).pack(side=tk.LEFT, padx=5, pady=5)
version_entry = tk.Entry(version_frame, width=5, validate="key", validatecommand=validate_version_cmd, bg=entry_bg_color, highlightbackground=background_color)
version_entry.insert(0, "4.5")
version_entry.pack(side=tk.LEFT, padx=5, pady=5)

# 引擎音效输入框
enginesound_frame = tk.Frame(inner_frame, background=background_color)
tk.Label(enginesound_frame, text="引擎音效:", background=background_color).pack(side=tk.LEFT, padx=5, pady=5)
enginesound_entry = tk.Entry(enginesound_frame, width=20, validate="key",  bg=entry_bg_color, highlightbackground=background_color)
enginesound_entry.pack(side=tk.LEFT, padx=5, pady=5)
enginesound_entry.insert(0, "<kuid:xx:xx>")

# 鸣笛音效输入框
hornsound_frame = tk.Frame(inner_frame, background=background_color)
tk.Label(hornsound_frame, text="鸣笛音效:", background=background_color).pack(side=tk.LEFT, padx=5, pady=5)
hornsound_entry = tk.Entry(hornsound_frame, width=20, validate="key",  bg=entry_bg_color, highlightbackground=background_color)
hornsound_entry.pack(side=tk.LEFT, padx=5, pady=5)
hornsound_entry.insert(0, "<kuid:xx:xx>")

# 内饰输入框
interior_frame = tk.Frame(inner_frame, background=background_color)
tk.Label(interior_frame, text="内饰:", background=background_color).pack(side=tk.LEFT, padx=5, pady=5)
interior_entry = tk.Entry(interior_frame, width=20, validate="key",  bg=entry_bg_color, highlightbackground=background_color)
interior_entry.pack(side=tk.LEFT, padx=5, pady=5)
interior_entry.insert(0, "<kuid:xx:xx>")

# 插件中文名输入框
username_cn_frame = tk.Frame(inner_frame, background=background_color)
tk.Label(username_cn_frame, text="插件中文名:", background=background_color).pack(side=tk.LEFT, padx=5, pady=5)
username_cn_entry = tk.Entry(username_cn_frame, width=20, validate="key",  bg=entry_bg_color, highlightbackground=background_color)
username_cn_entry.pack(side=tk.LEFT, padx=5, pady=5)

# 介绍输入框
description_frame = tk.Frame(inner_frame, background=background_color)
tk.Label(description_frame, text="介绍:", background=background_color).pack(side=tk.LEFT, padx=5, pady=5)
description_entry = tk.Entry(description_frame, width=35, validate="key", validatecommand=validate_plugin_name_cmd, bg=entry_bg_color, highlightbackground=background_color)
description_entry.pack(side=tk.LEFT, padx=5, pady=5)

# 中文介绍输入框（不限制输入内容）
description_cn_frame = tk.Frame(inner_frame, background=background_color)
tk.Label(description_cn_frame, text="中文介绍:", background=background_color).pack(side=tk.LEFT, padx=5, pady=5)
description_cn_entry = tk.Entry(description_cn_frame, width=35, bg=entry_bg_color, highlightbackground=background_color)
description_cn_entry.pack(side=tk.LEFT, padx=5, pady=5)

# 类别输入框
category_frame = tk.Frame(inner_frame, background=background_color)
tk.Label(category_frame, text="类别:", background=background_color).pack(side=tk.LEFT, padx=5, pady=5)
category_entry = tk.Entry(category_frame, width=5, validate="key", validatecommand=validate_letters_cmd, bg=entry_bg_color, highlightbackground=background_color)
category_entry.insert(0, "AL")
category_entry.pack(side=tk.LEFT, padx=5, pady=5)

# 类别-地区输入框
region_frame = tk.Frame(inner_frame, background=background_color)
tk.Label(region_frame, text="类别-地区:", background=background_color).pack(side=tk.LEFT, padx=5, pady=5)
region_entry = tk.Entry(region_frame, width=5, validate="key", validatecommand=validate_letters_cmd, bg=entry_bg_color, highlightbackground=background_color)
region_entry.insert(0, "CN")
region_entry.pack(side=tk.LEFT, padx=5, pady=5)

# 年代输入框
era_frame = tk.Frame(inner_frame, background=background_color)
tk.Label(era_frame, text="年代:", background=background_color).pack(side=tk.LEFT, padx=5, pady=5)
era_entry = tk.Entry(era_frame, width=10, validate="key", validatecommand=validate_era_cmd, bg=entry_bg_color, highlightbackground=background_color)
era_entry.insert(0, "2020s")
era_entry.pack(side=tk.LEFT, padx=5, pady=5)

# 类（kind）输入框
kind_frame = tk.Frame(inner_frame, background=background_color)
tk.Label(kind_frame, text="类:", background=background_color).pack(side=tk.LEFT, padx=5, pady=5)
kind_entry = tk.Entry(kind_frame, width=10, validate="key", validatecommand=validate_letters_cmd, bg=entry_bg_color, highlightbackground=background_color)
kind_entry.insert(0, "traincar")
kind_entry.pack(side=tk.LEFT, padx=5, pady=5)

# 引擎（engine）输入框
engine_frame = tk.Frame(inner_frame, background=background_color)
tk.Label(engine_frame, text="引擎:", background=background_color).pack(side=tk.LEFT, padx=5, pady=5)
engine_entry = tk.Entry(engine_frame, width=10, validate="key", validatecommand=validate_digits_cmd, bg=entry_bg_color, highlightbackground=background_color)
engine_entry.insert(0, "1")
engine_entry.pack(side=tk.LEFT, padx=5, pady=5)

# KUID 输入框
kuid_frame = tk.Frame(inner_frame, background=background_color)
tk.Label(kuid_frame, text="KUID:", background=background_color).pack(side=tk.LEFT, padx=5, pady=5)

kuid_part1_var = tk.StringVar()
kuid_part1_entry = tk.Entry(kuid_frame, width=6, textvariable=kuid_part1_var, validate="key", validatecommand=validate_digits_cmd, bg=entry_bg_color, highlightbackground=background_color)
kuid_part1_entry.pack(side=tk.LEFT, padx=(5, 0), pady=5)

tk.Label(kuid_frame, text=":", background=background_color).pack(side=tk.LEFT, padx=0, pady=5)

kuid_part2_var = tk.StringVar()
kuid_part2_entry = tk.Entry(kuid_frame, width=8, textvariable=kuid_part2_var, validate="key", validatecommand=validate_digits_cmd, bg=entry_bg_color, highlightbackground=background_color)
kuid_part2_entry.pack(side=tk.LEFT, padx=(0, 5), pady=5)

# 插件名称输入框
plugin_name_frame = tk.Frame(inner_frame, background=background_color)
tk.Label(plugin_name_frame, text="插件名称:", background=background_color).pack(side=tk.LEFT, padx=5, pady=5)
plugin_name_entry = tk.Entry(plugin_name_frame, width=20, validate="key", validatecommand=validate_plugin_name_cmd, bg=entry_bg_color, highlightbackground=background_color)
plugin_name_entry.pack(side=tk.LEFT, padx=5, pady=5)

# 引擎参数输入框
engine_spec_frame = tk.Frame(inner_frame, background=background_color)
tk.Label(engine_spec_frame, text="引擎参数:", background=background_color).pack(side=tk.LEFT, padx=5, pady=5)
engine_spec_entry = tk.Entry(engine_spec_frame, width=20, validate="key", validatecommand=validate_engine_spec_cmd, bg=entry_bg_color, highlightbackground=background_color)
engine_spec_entry.pack(side=tk.LEFT, padx=5, pady=5)
engine_spec_entry.insert(0, "<kuid:xx:xx>")

# 重量输入框
mass_frame = tk.Frame(inner_frame, background=background_color)
tk.Label(mass_frame, text="重量:", background=background_color).pack(side=tk.LEFT, padx=5, pady=5)
mass_entry = tk.Entry(mass_frame, width=10, validate="key", validatecommand=validate_mass_cmd, bg=entry_bg_color, highlightbackground=background_color)
mass_entry.insert(0, "138000")
mass_entry.pack(side=tk.LEFT, padx=5, pady=5)

# 作者输入框
author_frame = tk.Frame(inner_frame, background=background_color)
tk.Label(author_frame, text="作者:", background=background_color).pack(side=tk.LEFT, padx=5, pady=5)
author_entry = tk.Entry(author_frame, width=20, validate="key", validatecommand=validate_author_cmd, bg=entry_bg_color, highlightbackground=background_color)
author_entry.pack(side=tk.LEFT, padx=5, pady=5)

# 邮箱输入框
email_frame = tk.Frame(inner_frame, background=background_color)
tk.Label(email_frame, text="邮箱:", background=background_color).pack(side=tk.LEFT, padx=5, pady=5)
email_entry = tk.Entry(email_frame, width=20, validate="key", validatecommand=validate_email_cmd, bg=entry_bg_color, highlightbackground=background_color)
email_entry.pack(side=tk.LEFT, padx=5, pady=5)

# 授权输入框
license_frame = tk.Frame(inner_frame, background=background_color)
tk.Label(license_frame, text="授权:", background=background_color).pack(side=tk.LEFT, padx=5, pady=5)
license_entry = tk.Entry(license_frame, width=10, validate="key", validatecommand=validate_license_cmd, bg=entry_bg_color, highlightbackground=background_color)
license_entry.pack(side=tk.LEFT, padx=5, pady=5)

# 组织输入框
organisation_frame = tk.Frame(inner_frame, background=background_color)
tk.Label(organisation_frame, text="组织:", background=background_color).pack(side=tk.LEFT, padx=5, pady=5)
organisation_entry = tk.Entry(organisation_frame, width=20, validate="key", validatecommand=validate_organisation_cmd, bg=entry_bg_color, highlightbackground=background_color)
organisation_entry.pack(side=tk.LEFT, padx=5, pady=5)

# 联络网站输入框
contact_website_frame = tk.Frame(inner_frame, background=background_color)
tk.Label(contact_website_frame, text="联络网站:", background=background_color).pack(side=tk.LEFT, padx=5, pady=5)
contact_website_entry = tk.Entry(contact_website_frame, width=20, validate="key", validatecommand=validate_contact_website_cmd, bg=entry_bg_color, highlightbackground=background_color)
contact_website_entry.insert(0, "https://")
contact_website_entry.pack(side=tk.LEFT, padx=5, pady=5)

# 公司输入框
company_frame = tk.Frame(inner_frame, background=background_color)
tk.Label(company_frame, text="公司:", background=background_color).pack(side=tk.LEFT, padx=5, pady=5)
company_entry = tk.Entry(company_frame, width=20, validate="key", validatecommand=validate_company_cmd, bg=entry_bg_color, highlightbackground=background_color)
company_entry.pack(side=tk.LEFT, padx=5, pady=5)

# 机舱消音输入框
cabin_muffle_frame = tk.Frame(inner_frame, background=background_color)
tk.Label(cabin_muffle_frame, text="机舱消音:", background=background_color).pack(side=tk.LEFT, padx=5, pady=5)
cabin_muffle_entry = tk.Entry(cabin_muffle_frame, width=5, validate="key", validatecommand=validate_cabin_muffle_cmd, bg=entry_bg_color, highlightbackground=background_color)
cabin_muffle_entry.insert(0, "0.6")
cabin_muffle_entry.pack(side=tk.LEFT, padx=5, pady=5)

# 车钩最小间隙输入框
coupler_gap_frame = tk.Frame(inner_frame, background=background_color)
tk.Label(coupler_gap_frame, text="车钩最小间隙:", background=background_color).pack(side=tk.LEFT, padx=5, pady=5)
coupler_gap_entry = tk.Entry(coupler_gap_frame, width=5, validate="key", validatecommand=validate_coupler_gap_cmd, bg=entry_bg_color, highlightbackground=background_color)
coupler_gap_entry.insert(0, "0.2")
coupler_gap_entry.pack(side=tk.LEFT, padx=5, pady=5)
coupler_gap_frame.pack(padx=5, pady=5, fill=tk.X)

# 车钩是否发声输入框
coupler_sounds_frame = tk.Frame(inner_frame, background=background_color)
tk.Label(coupler_sounds_frame, text="车钩是否发声:", background=background_color).pack(side=tk.LEFT, padx=5, pady=5)
coupler_sounds_entry = tk.Entry(coupler_sounds_frame, width=5, validate="key", validatecommand=validate_coupler_sounds_cmd, bg=entry_bg_color, highlightbackground=background_color)
coupler_sounds_entry.insert(0, "1")
coupler_sounds_entry.pack(side=tk.LEFT, padx=5, pady=5)
coupler_sounds_frame.pack(padx=5, pady=5, fill=tk.X)

# 灯光颜色输入框
light_color_frame = tk.Frame(inner_frame, background=background_color)
tk.Label(light_color_frame, text="灯光颜色:", background=background_color).pack(side=tk.LEFT, padx=5, pady=5)
light_color_entry = tk.Entry(light_color_frame, width=15, bg=entry_bg_color, highlightbackground=background_color)
light_color_entry.pack(side=tk.LEFT, padx=5, pady=5)

choose_light_color_button = tk.Button(light_color_frame, text="选择颜色", command=lambda: choose_light_color(light_color_entry), bg=entry_bg_color, highlightbackground=background_color)
choose_light_color_button.pack(side=tk.LEFT, padx=5, pady=5)

# 闪灯颜色输入框
ditch_color_frame = tk.Frame(inner_frame, background=background_color)
tk.Label(ditch_color_frame, text="闪灯颜色:", background=background_color).pack(side=tk.LEFT, padx=5, pady=5)
ditch_color_entry = tk.Entry(ditch_color_frame, width=15, bg=entry_bg_color, highlightbackground=background_color)
ditch_color_entry.pack(side=tk.LEFT, padx=5, pady=5)

choose_ditch_color_button = tk.Button(ditch_color_frame, text="选择颜色", command=lambda: choose_light_color(ditch_color_entry), bg=entry_bg_color, highlightbackground=background_color)
choose_ditch_color_button.pack(side=tk.LEFT, padx=5, pady=5)

# 闪光频率输入框
flash_scale_frame = tk.Frame(inner_frame, background=background_color)
tk.Label(flash_scale_frame, text="闪光频率:", background=background_color).pack(side=tk.LEFT, padx=5, pady=5)
flash_scale_entry = tk.Entry(flash_scale_frame, width=5, validate="key", validatecommand=validate_digits_cmd, bg=entry_bg_color, highlightbackground=background_color)
flash_scale_entry.insert(0, "1")
flash_scale_entry.pack(side=tk.LEFT, padx=5, pady=5)

# 机车类别选择框
locomotive_frame = tk.Frame(inner_frame, background=background_color)
tk.Label(locomotive_frame, text="机车类别:", background=background_color).pack(side=tk.LEFT, padx=5, pady=5)
locomotive_combobox = ttk.Combobox(locomotive_frame, values=["内燃机车", "电力机车"], state="readonly")
locomotive_combobox.set("内燃机车")
locomotive_combobox.pack(side=tk.LEFT, padx=5, pady=5)
locomotive_combobox.bind("<<ComboboxSelected>>", toggle_locomotive_options)

# 受电弓输入框
pantograph_frame = tk.Frame(inner_frame, background=background_color)
tk.Label(pantograph_frame, text="受电弓:", background=background_color).pack(side=tk.LEFT, padx=5, pady=5)
pantograph_entry = tk.Entry(pantograph_frame, width=20, validate="key",  bg=entry_bg_color, highlightbackground=background_color)
pantograph_entry.pack(side=tk.LEFT, padx=5, pady=5)
pantograph_entry.insert(0, "<kuid:xx:xx>")

# 烟雾相关的输入框
smoke_frame = tk.Frame(inner_frame, background=background_color)

# 烟雾-慢
smoke_slowlife_frame = tk.Frame(smoke_frame, background=background_color)
tk.Label(smoke_slowlife_frame, text="烟雾-慢:", background=background_color).pack(side=tk.LEFT, padx=5, pady=5)
smoke_slowlife_entry = tk.Entry(smoke_slowlife_frame, width=5, validate="key",  bg=entry_bg_color, highlightbackground=background_color)
smoke_slowlife_entry.pack(side=tk.LEFT, padx=5, pady=5)
smoke_slowlife_frame.pack(padx=5, pady=5, fill=tk.X)

# 烟雾-快
smoke_fastlife_frame = tk.Frame(smoke_frame, background=background_color)
tk.Label(smoke_fastlife_frame, text="烟雾-快:", background=background_color).pack(side=tk.LEFT, padx=5, pady=5)
smoke_fastlife_entry = tk.Entry(smoke_fastlife_frame, width=5, validate="key",  bg=entry_bg_color, highlightbackground=background_color)
smoke_fastlife_entry.pack(side=tk.LEFT, padx=5, pady=5)
smoke_fastlife_frame.pack(padx=5, pady=5, fill=tk.X)

# 烟雾最大高度
smoke_height_frame = tk.Frame(smoke_frame, background=background_color)
tk.Label(smoke_height_frame, text="烟雾高度:", background=background_color).pack(side=tk.LEFT, padx=5, pady=5)
smoke_height_entry = tk.Entry(smoke_height_frame, width=5, validate="key",  bg=entry_bg_color, highlightbackground=background_color)
smoke_height_entry.pack(side=tk.LEFT, padx=5, pady=5)
smoke_height_frame.pack(padx=5, pady=5, fill=tk.X)

# 烟雾速度
smoke_fastspeed_frame = tk.Frame(smoke_frame, background=background_color)
tk.Label(smoke_fastspeed_frame, text="烟雾速度:", background=background_color).pack(side=tk.LEFT, padx=5, pady=5)
smoke_fastspeed_entry = tk.Entry(smoke_fastspeed_frame, width=5, validate="key",  bg=entry_bg_color, highlightbackground=background_color)
smoke_fastspeed_entry.pack(side=tk.LEFT, padx=5, pady=5)
smoke_fastspeed_frame.pack(padx=5, pady=5, fill=tk.X)

# 烟雾随机
smoke_random_frame = tk.Frame(smoke_frame, background=background_color)
tk.Label(smoke_random_frame, text="烟雾随机:", background=background_color).pack(side=tk.LEFT, padx=5, pady=5)
smoke_random_entry = tk.Entry(smoke_random_frame, width=5, validate="key",  bg=entry_bg_color, highlightbackground=background_color)
smoke_random_entry.pack(side=tk.LEFT, padx=5, pady=5)
smoke_random_frame.pack(padx=5, pady=5, fill=tk.X)

# 烟雾阴影
smoke_shade_frame = tk.Frame(smoke_frame, background=background_color)
tk.Label(smoke_shade_frame, text="烟雾阴影:", background=background_color).pack(side=tk.LEFT, padx=5, pady=5)
smoke_shade_entry = tk.Entry(smoke_shade_frame, width=5, validate="key",  bg=entry_bg_color, highlightbackground=background_color)
smoke_shade_entry.pack(side=tk.LEFT, padx=5, pady=5)
smoke_shade_frame.pack(padx=5, pady=5, fill=tk.X)

# 绑定鼠标滚轮事件
def on_mousewheel(event):
    # Windows 使用 Delta，Mac 使用 num
    main_canvas.yview_scroll(-1 * (event.delta // 120) if event.delta else -1 * (event.num), "units")

# 在不同的平台上绑定不同的事件
if root.tk.call('tk', 'windowingsystem') == 'aqua':
    main_canvas.bind_all('<MouseWheel>', on_mousewheel)
else:
    main_canvas.bind_all('<MouseWheel>', on_mousewheel)
    main_canvas.bind_all('<Button-4>', on_mousewheel)
    main_canvas.bind_all('<Button-5>', on_mousewheel)

# 创建config按钮
create_config_button = tk.Button(inner_frame, text="创建config", command=create_config, state=tk.DISABLED, bg=entry_bg_color, highlightbackground=background_color)

# 默认隐藏其他输入框
hide_other_entries()

# 定义 show_about 函数
def show_about():
    # 创建 Toplevel 窗口
    about_window = tk.Toplevel(root)
    about_window.title("关于 Content Builder 内容创建器")
    about_window.geometry("350x200")  # 设置窗口大小
    about_window.configure(background=background_color)

    # 添加内容
    about_label = tk.Label(about_window, text="Content Builder 内容创建器 v0.13\n\n"
                                             "这是一个用于创建列车内容配置文件的工具。\n\n"
                                             "版权所有 © 2023 CypressFab\n"
                                             "联系方式: cypress_cn@foxmail.com\n"
                                             "官方网站: https://www.cypress.hk.cn/",
                           justify=tk.LEFT,
                           background=background_color)
    about_label.pack(padx=20, pady=20, fill=tk.BOTH, expand=True)

    # 关闭按钮
    close_button = tk.Button(about_window, text="关闭", command=about_window.destroy, bg=entry_bg_color, highlightbackground=background_color)
    close_button.pack(pady=(0, 5))

# 创建关于按钮并放置在最下方
about_button = tk.Button(inner_frame, text="关于", command=show_about, bg=entry_bg_color, highlightbackground=background_color)
about_button.pack(side=tk.BOTTOM, padx=5, pady=5)

# 将关于按钮放在所有其他组件之后
about_button.lift()

# 运行主循环
root.mainloop()
